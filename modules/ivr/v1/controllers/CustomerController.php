<?php
/**
 * Created by PhpStorm.
 * User: juan
 * Date: 16/07/19
 * Time: 13:14
 */

namespace app\modules\ivr\v1\controllers;


use app\modules\config\models\Config;
use app\modules\ivr\v1\components\Controller;
use app\modules\ivr\v1\models\Customer;
use app\modules\ivr\v1\models\search\CustomerSearch;
use app\modules\sale\models\Bill;
use app\modules\sale\models\Product;
use app\modules\sale\modules\contract\components\ContractToInvoice;
use app\modules\sale\modules\contract\models\Contract;
use app\modules\westnet\models\NotifyPayment;
use app\modules\westnet\models\PaymentExtensionHistory;
use Yii;
use yii\base\Exception;
use yii\data\ActiveDataProvider;
use yii\filters\VerbFilter;
use yii\web\BadRequestHttpException;

class CustomerController extends Controller
{


    public function behaviors()
    {
        return array_merge(parent::behaviors(), [
            'verbFilter' => [
                'class' => VerbFilter::class,
                'actions' => [
                    'search' => ['POST']
                ],
            ],
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @SWG\Post(path="/customer/search",
     *     tags={"Customer"},
     *     summary="",
     *     description="(A-3) Devuelve un array con los clientes encontrados segun el criterio usado",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        required = true,
     *        type = "string",
     *        @SWG\Schema(
     *          @SWG\Property(property="field", type="string", description="Campo por el cual buscar al cliente. Puede ser 'document_number' para el documento y 'code' para el código de cliente"),
     *          @SWG\Property(property="value", type="string", description="El valor para el campo a buscar"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "Devuelve un array con el/los clientes activos encontrados"
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "Parametro faltante, cliente no encontrado, o error de autenticacion
     *          Posibles Mensajes :
     *              Parámetro 'field' es obligatorio
     *              Parámetro 'value' es obligatorio
     *              Parámetros 'field' y 'value' son obligatorios
     *              Cliente no encontrado
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionSearch()
    {

        $data = \Yii::$app->request->post();

        if (empty($data['field']) && empty($data['value']) ) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => "true",
                'msg' => \Yii::t('ivrapi','"field" and "value" params are required')
            ];
        }


        if (empty($data['field'])) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => "true",
                'msg' => \Yii::t('ivrapi','"field" param is required')
            ];
        }

        if (empty($data['value'])) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => "true",
                'msg' => \Yii::t('ivrapi','"value" param is required')
            ];
        }

        $search = new CustomerSearch();
        $dataProvider = new ActiveDataProvider(['query' => $search->search($data)]);

        if ($dataProvider->count === 0 ) {
            \Yii::$app->response->setStatusCode(400);
            return  [
                'error' => "true",
                'msg' => \Yii::t('ivrapi','Customer not found')
            ];
        }

        return [
            'error' => 'false',
            'data' => $dataProvider->getModels()
        ];

    }

    /**
     * @SWG\Post(path="/customer/balance-account",
     *     tags={"Customer"},
     *     summary="",
     *     description="(C-5) Devuelve  el saldo del cliente, y la info del último pago",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        description = "Código del cliente",
     *        required = true,
     *        type = "integer",
     *        @SWG\Schema(
     *          @SWG\Property(property="code", type="string", description="Código del cliente"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "Devuelve  el saldo del cliente, y la info del último pago"
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "Parametro faltante, cliente no encontrado, o error de autenticacion
     *          Posibles Mensajes :
     *              Parámetro 'code' es obligatorio
     *              Cliente no encontrado
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionBalanceAccount()
    {
        $data = \Yii::$app->request->post();

        if (!isset($data['code']) || empty($data['code'])) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => \Yii::t('ivrapi','"code" param is required')
            ];
        }

        $customer = Customer::findOne(['code' => $data['code']]);

        if (empty($customer)) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => \Yii::t('ivrapi','Customer not found')
            ];
        }

        return [
            'error' => 'false',
            'data' => $customer->accountInfo(),
        ];

    }


    /**
     * @SWG\Post(path="/customer/can-force",
     *     tags={"Customer"},
     *     summary="",
     *     description="(A-33) Si el cliente puede solicitar una extension de pago devuelve monto, fecha desde y fecha hasta y ademas
           los contratos que tiene activo con el domicilio de cada uno, de lo contrario devuelve error",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        description = "Código del cliente",
     *        required = true,
     *        type = "integer",
     *        @SWG\Schema(
     *          @SWG\Property(property="code", type="string", description="Código del cliente"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "El cliente puede solicitar extensión de pago. Devuelve los contratos activos, el precio de la extension,
     *         fecha de inicio y fecha de fin de la extension "
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "El cliente no puede solicitar extension de  pago, parametro faltante, cliente no encontrado, o error de autenticacion
     *          Posibles Mensajes :
     *              Parámetro 'code' es obligatorio
     *              El cliente a excedido el límite de extensiones de pago del mes
     *              Cliente no encontrado
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionCanForce()
    {
        $data = \Yii::$app->request->post();
        $default_message = \Yii::t('ivrapi','The customer exceeded the payment extension limit');

        if (!isset($data['code']) || empty($data['code'])) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => "true",
                'deudor' => "false",
                'nuevo' => 'false',
                'msg' => \Yii::t('ivrapi','"code" param is required')
            ];
        }

        $customer = Customer::findOne(['code' => $data['code'], 'status' => Customer::STATUS_ENABLED]);

        if (empty($customer)) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'deudor' => 'false',
                'nuevo' => 'false',
                'msg' => \Yii::t('ivrapi','Customer not found')
            ];
        }

        if (!$customer->hasContractAndConnectionActive()) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'deudor' => 'false',
                'nuevo' => 'false',
                'msg' => \Yii::t('ivrapi','Customer not found')
            ];
        }

        //TODO: Eliminar segunda condicion al finalizar el desarrollo de IVR
        if (!$customer->canRequestPaymentExtension() && $customer->code !== 27237) {
            \Yii::$app->response->setStatusCode(400);

            return [
                'error' => 'true',
                'deudor' => $customer->debtor ? 'true' : 'false',
                'nuevo' => $customer->isNew ? 'true' : 'false',
                'msg' => $customer->detailed_error ? $customer->detailed_error : $default_message
            ];
        }

        return [
            'error' => 'false',
            'deudor' => 'false',
            'nuevo' => 'false',
            'data' => $customer->extendConnetionInfo()
        ];
    }

    /**
     * @SWG\Post(path="/customer/force-connection",
     *     tags={"Customer"},
     *     summary="",
     *     description="(A-42)Realiza una extensión de pago",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        description = "ID del contrato de la conexion que se va a forzar",
     *        required = true,
     *        type = "integer",
     *        @SWG\Schema(
     *          @SWG\Property(property="contract_id", type="integer", description="ID del contrato de la conexion que se va a forzar"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "Devuelve la fecha limite"
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "El cliente no puede solicitar extension de  pago, parametro faltante, cliente no encontrado, o error de autenticacion
     *          Posibles Mensajes :
     *              No se encuentra la conexión para la extensión de pago
     *              Cliente no encontrado
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionForceConnection()
    {
        $data = Yii::$app->request->post();
        $default_message = \Yii::t('ivrapi','The customer exceeded the payment extension limit');

        if (!isset($data['code'])){
            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'deudor' => 'false',
                'nuevo' => 'false',
                'msg' => Yii::t('ivrapi','Customer not found')
            ];
        }

        $customer = Customer::findOne(['code' => $data['code'], 'status' => Customer::STATUS_ENABLED]);

        if (empty($customer)) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'deudor' => 'false',
                'nuevo' => 'false',
                'msg' => \Yii::t('ivrapi','Customer not found')
            ];
        }

        $contract = Contract::find()->andWhere(['customer_id' => $customer->customer_id, 'status' => Contract::STATUS_ACTIVE])->one();

        if (empty($contract)) {
            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'deudor' => 'false',
                'nuevo' => 'false',
                'msg' => Yii::t('ivrapi','Connection to payment extension not found')
            ];
        }

        $connection = $contract->connection;

        if (empty($connection)) {
            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'deudor' => 'false',
                'nuevo' => 'false',
                'msg' => Yii::t('ivrapi','Connection to payment extension not found')
            ];
        }

        if (!$contract->customer->canRequestPaymentExtension() && $customer->code !== 27237) {
            \Yii::$app->response->setStatusCode(400);

            return [
                'error' => 'true',
                'deudor' => $contract->customer->debtor ? 'true' : 'false',
                'nuevo' => $contract->customer->isNew ? 'true' : 'false',
                'msg' => $customer->detailed_error ? $customer->detailed_error : $default_message
            ];
        }

        if ($connection->canForce()){

            $payment_extension_product = Product::findOne(Config::getValue('extend_payment_product_id'));

            if (empty($payment_extension_product)) {
                Yii::$app->response->setStatusCode(400);
                return [
                    'error' => 'true',
                    'deudor' => 'false',
                    'nuevo' => 'false',
                    'msg' => Yii::t('ivrapi','Can`t create payment extension')
                ];
            }

            $create_pti = true;

            $due_date =(new \DateTime('now'))
                ->setTimestamp(\app\modules\sale\models\Customer::getMaxDateNoticePaymentExtension())
                ->format('d-m-Y');

            $real_date = (new \DateTime('now'))
                ->setTimestamp(\app\modules\sale\models\Customer::getMaxDateRealPaymentExtension())
                ->format('d-m-Y');


            if($connection->force($real_date, $payment_extension_product->product_id, null, $create_pti)){
                PaymentExtensionHistory::createPaymentExtensionHistory($contract->customer_id, PaymentExtensionHistory::FROM_IVR);
                return [
                    'error' => 'false',
                    'to_date' => $due_date,
                    'price' => round($payment_extension_product->finalPrice, 2),
                    'msg' => Yii::t('ivrapi','Payment Extension created successfull')
                ];
            }
        }

        Yii::$app->response->setStatusCode(400);
        return [
            'error' => 'true',
            'deudor' => 'false',
            'nuevo' => 'false',
            'msg' => Yii::t('ivrapi','Can`t create payment extension')
        ];
    }

    /**
     * @SWG\Post(path="/customer/clipped-for-debt",
     *     tags={"Customer"},
     *     summary="",
     *     description="(F-1) Indica si el cliente esta cortado por mora",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        description = "Codigo del cliente por el que se consulta",
     *        required = true,
     *        type = "integer",
     *        @SWG\Schema(
     *          @SWG\Property(property="code", type="integer", description="Código del cliente"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "Devuelve si el cliente esta cortado por deuda"
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "parametro faltante, cliente no encontrado, o error de autenticacion
     *          Posibles Mensajes :
     *              Cliente no encontrado
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionClippedForDebt() {
        $data = \Yii::$app->request->post();

        if (!isset($data['code']) || empty($data['code'])) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => true,
                'msg' => \Yii::t('ivrapi','"code" param is required')
            ];
        }

        $customer = Customer::findOne(['code' => $data['code']]);

        if (empty($customer)) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => true,
                'msg' => \Yii::t('ivrapi','Customer not found')
            ];
        }

        try {

            if ($customer->hasClippedForDebt()) {
                return [
                    'error' => "false",
                    'clipped' => 'disable',
                ];
            }

            return [
                'error' => "false",
                'clipped' => 'enable',
            ];
        }catch (\Exception $ex) {
            return [
                'error' => "true",
                'msg' => $ex->getMessage()
            ];
        }

    }

    public function actionCpeStatus()
    {
        /**
         * Yii::$app->request->get() Acceso a parametros get
         * Yii::$app->request->post() Accesso a parametros post
         *
         * Respuesta
         *  Yii::$app->response->setStatusCode(400) Define el codigo de la respuesta, por defecto si no se especifica es 200
         *  return [] Se debe devolver un array de php el cual sera parseado a JSON
         *
         **/
    }

    public function actionDevicesStatus()
    {

    }

    /**
     * @SWG\Post(path="/customer/send-bill-email",
     *     tags={"Customer"},
     *     summary="",
     *     description="(C-3) Envia la última factura del cliente por email",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        description = "",
     *        required = true,
     *        type = "integer",
     *        @SWG\Schema(
     *          @SWG\Property(property="code", type="integer", description="Código del cliente"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "Devuelve un mensaje sactifactorio si se pudo enviar el email"
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "parametro faltante, cliente no encontrado, cliente sin facturas, No hay email registrado del cliente
                   no se pudo enviar ,o error de autenticacion
     *          Posibles Mensajes :
     *              Cliente no encontrado
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionSendBillEmail()
    {
        $data = Yii::$app->request->post();

        if (!isset($data['code']) || empty($data['code'])) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => \Yii::t('ivrapi','"code" param is required')
            ];
        }

        $customer = Customer::findOne(['code' => $data['code']]);

        if (empty($customer)) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => \Yii::t('ivrapi','Customer not found')
            ];
        }


        $model = \app\modules\sale\models\bills\Bill::find()->andWhere(['customer_id' => $customer->customer_id])->orderBy(['bill_id' => SORT_DESC])->one();

        if(empty($model)) {
            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => Yii::t('ivrapi','The customer haven`t any bill')
            ];
        }

        // La de cupon
        if ($model->bill_type_id == Config::getValue('cupon_bill_types')) {
            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => Yii::t('ivrapi','The customer haven`t any bill')
            ];
        }

        $pdf = $this->actionPdf($model);
        $pdf = substr($pdf, strrpos($pdf, '%PDF-'));
        $fileName = "/tmp/" . 'Comprobante' . sprintf("%04d", $model->getPointOfSale()->number) . "-" . sprintf("%08d", $model->number) . "-" . $model->customer_id . ".pdf";
        $file = fopen($fileName, "w+");
        fwrite($file, $pdf);
        fclose($file);

        if (trim($model->customer->email) == "") {

            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => Yii::t("app", "The Client don't have email.")
            ];
        }

        if (!$model->sendEmail($fileName)) {
            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => Yii::t('app', 'The email could not be sent.')
            ];
        }

        return [
            'error' => 'false',
            'msg' => Yii::t('app', 'The email is sended succesfully.')
        ];



    }

    public function actionPdf($model)
    {

//        $response = Yii::$app->getResponse();
//        $response->format = \yii\web\Response::FORMAT_RAW;
//        $response->headers->set('Content-type: application/pdf');
//        $response->setDownloadHeaders('bill.pdf', 'application/pdf', true);


        $this->layout = '//pdf';

        $dataProvider = new \yii\data\ActiveDataProvider([
            'query' => $model->getBillDetails(),
            'pagination' => false
        ]);

        $view = $this->render('@app/modules/sale/views/bill/pdf.php', [
            'model' => $model,
            'dataProvider' => $dataProvider
        ]);

        $pdf = ' ';

        try{
            $pdf = \app\components\helpers\PDFService::makePdf($view);
        } catch (\Exception $ex){
            \Yii::trace($ex);
        }

        return $pdf;
    }


    /**
     * @SWG\Post(path="/customer/get-customer",
     *     tags={"Customer"},
     *     summary="",
     *     description="Devuelve info completa del cliente. Combina las respuestas de 'customer/search', 'customer/balance-account', 'customer/clipped-for-debt'",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        description = "",
     *        required = true,
     *        type = "integer",
     *        @SWG\Schema(
     *          @SWG\Property(property="code", type="integer", description="Código del cliente"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "
     *         {
     *               'error': 'false',
     *               'data': {
     *                   'customer_id': 39932,
     *                   'fullName': 'LEZCANO, NADIA ETHEL ',
     *                   'documentType': {
     *                   'document_type_id': 2,
     *                   'name': 'DNI',
     *                   'code': 96,
     *                   'regex': ''
     *                  },
     *                   'document_number': '39382763',
     *                   'code': 47745,
     *                   'balance': -1035.03,
     *                   'last_payment': {
     *                   'amount': 1110,
     *                   'date': '17-07-2019'
     *                   },
     *                   'clipped': 'enabled'
     *               }
     *         }"
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "parametro faltante, cliente no encontrado, o error de autenticacion
     *          Posibles Mensajes :
     *              Cliente no encontrado
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionGetCustomer()
    {
        try {

            $data = Yii::$app->request->post();

            if (!isset($data['code']) || empty($data['code'])) {
                \Yii::$app->response->setStatusCode(400);
                return [
                    'error' => 'true',
                    'msg' => \Yii::t('ivrapi','"code" param is required')
                ];
            }

            $customer = Customer::findOne(['code' => $data['code'], 'status' => Customer::STATUS_ENABLED]);

            if (empty($customer)) {
                \Yii::$app->response->setStatusCode(400);
                return [
                    'error' => 'true',
                    'msg' => \Yii::t('ivrapi','Customer not found')
                ];
            }

            if (!$customer->hasContractAndConnectionActive()) {
                \Yii::$app->response->setStatusCode(400);
                return [
                    'error' => 'true',
                    'msg' => \Yii::t('ivrapi','Customer not found')
                ];
            }

            $customer->scenario= 'full';

            return [
                'error' => 'false',
                'data' => $customer,
            ];
        } catch (Exception $ex) {
            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => $ex->getMessage()
            ];
        }
    }

    /**
     * @SWG\Post(path="/customer/get-customer-by-document-number",
     *     tags={"Customer"},
     *     summary="",
     *     description="Devuelve info completa del cliente. Combina las respuestas de 'customer/search', 'customer/balance-account', 'customer/clipped-for-debt'",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        description = "",
     *        required = true,
     *        type = "integer",
     *        @SWG\Schema(
     *          @SWG\Property(property="code", type="integer", description="Número de documento del cliente"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "
     *         {
     *               'error': 'false',
     *               'data': {
     *                   'customer_id': 39932,
     *                   'fullName': 'LEZCANO, NADIA ETHEL ',
     *                   'documentType': {
     *                   'document_type_id': 2,
     *                   'name': 'DNI',
     *                   'code': 96,
     *                   'regex': ''
     *                  },
     *                   'document_number': '39382763',
     *                   'code': 47745,
     *                   'balance': -1035.03,
     *                   'last_payment': {
     *                   'amount': 1110,
     *                   'date': '17-07-2019'
     *                   },
     *                   'clipped': 'enabled'
     *               }
     *         }"
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "parametro faltante, cliente no encontrado, o error de autenticacion
     *          Posibles Mensajes :
     *              Cliente no encontrado
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionGetCustomerByDocumentNumber()
    {
        try {

            $data = Yii::$app->request->post();
            $customer_qty = 0;
            $active_customers = [];

            if (!isset($data['document_number']) || empty($data['document_number'])) {
                \Yii::$app->response->setStatusCode(400);
                return [
                    'error' => 'true',
                    'customer_qty' => 0,
                    'msg' => \Yii::t('ivrapi','"document_number" param is required')
                ];
            }

            $customers = Customer::find()->where(['document_number' => $data['document_number'], 'status' => Customer::STATUS_ENABLED])->all();

            if (empty($customers)) {
                \Yii::$app->response->setStatusCode(400);
                return [
                    'error' => 'true',
                    'customer_qty' => 0,
                    'msg' => \Yii::t('ivrapi','Customer not found')
                ];
            }

            foreach ($customers as $customer) {
                if ($customer->hasContractAndConnectionActive()) {
                    $customer->scenario = 'full';
                    array_push($active_customers, $customer);
                    $customer_qty ++;
                }
            }

            //Si no hay ningun cliente activo
            if($customer_qty <= 0) {
                \Yii::$app->response->setStatusCode(400);
                return [
                    'error' => 'true',
                    'customer_qty' => 0,
                    'msg' => \Yii::t('ivrapi','Customer not found')
                ];
            }

            //Se pide específicamente que si el resultado es uno solo NO se devuelva dentro de un array
            if(count($active_customers) == 1) {
                return [
                    'error' => 'false',
                    'data' => $active_customers[0],
                    'customer_qty' => 1
                ];
            }

            $active_customers['customer_qty'] = $customer_qty;

            return [
                'error' => 'false',
                'customer_qty' => 0,
                'data' => $active_customers,
            ];
        } catch (Exception $ex) {
            Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'customer_qty' => 0,
                'msg' => $ex->getMessage()
            ];
        }
    }

    /**
     * @SWG\Post(path="/customer/create-notify-payment",
     *     tags={"Customer"},
     *     summary="",
     *     description="Informa un pago",
     *     produces={"application/json"},
     *     security={{"auth":{}}},
     *     @SWG\Parameter(
     *        in = "body",
     *        name = "body",
     *        description = "",
     *        required = true,
     *        type = "integer",
     *        @SWG\Schema(
     *          @SWG\Property(property="code", type="integer", description="Código del cliente"),
     *          @SWG\Property(property="date", type="string", description="Formato dd-mm-yyyy"),
     *          @SWG\Property(property="amount", type="number", description="Monto del pago"),
     *          @SWG\Property(property="payment_method_id", type="integer", description="ID del método de pago"),
     *          @SWG\Property(property="contract_id", type="integer", description="ID del contrato"),
     *        )
     *     ),
     *
     *
     *     @SWG\Response(
     *         response = 200,
     *         description = "
     *         {
     *               'error': 'false',
     *               'msg': 'Su informe de pago se creó exitosamente'
     *         }"
     *
     *     ),
     *     @SWG\Response(
     *         response = 400,
     *         description = "parametro faltante, cliente no encontrado, o error de autenticacion
     *          Posibles Mensajes :
     *              Cliente no encontrado
     *              Usted no puede notificar un pago este mes
     *     ",
     *         @SWG\Schema(ref="#/definitions/Error1"),
     *     ),
     *
     * )
     *
     */
    public function actionCreateNotifyPayment()
    {
        $data = Yii::$app->request->post();

        if (!isset($data['code']) || empty($data['code']) ||
            !isset($data['amount']) || empty($data['amount']) || !isset($data['payment_method_id']) || empty($data['payment_method_id'])
            || !isset($data['contract_id']) || empty($data['contract_id'])) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => \Yii::t('ivrapi','code, date, amount, payment_method_id, contract_id are required')
            ];
        }

        $customer = Customer::findOne(['code' => $data['code']]);

        if (empty($customer)) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => \Yii::t('ivrapi','Customer not found')
            ];
        }

        $date = (new \DateTime(date('Y-m-d')))->modify('first day of this month')->format('Y-m-d');
        $date_to = (new \DateTime(date('Y-m-d')))->modify('last day of this month')->format('Y-m-d');

        if (!$customer->getContracts()->andWhere(['contract_id' => $data['contract_id']])->exists()){
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => \Yii::t('ivrapi','Invalid Contract')

            ];
        }

        if (!$customer->canNotifyPayment($date, $date_to)) {
            \Yii::$app->response->setStatusCode(400);
            return [
                'error' => 'true',
                'msg' => \Yii::t('ivrapi','You can`t notify a payment this month')

            ];
        }



        $notify_payment = new NotifyPayment([
            'customer_id' => $customer->customer_id,
            'date' => date('Y-m-d'),
            'amount' => $data['amount'],
            'payment_method_id' => $data['payment_method_id'],
            'contract_id' => $data['contract_id'],
            'from' => 'IVR'
        ]);

        $trasanction = Yii::$app->db->beginTransaction();

        $result = $this->createPaymentExtensionAndForce($data['contract_id']);
        if($notify_payment->save() && $result['status']) {
            $trasanction->commit();
            return [
                'error' => 'false',
                'msg' => Yii::t('app', 'Your notify payment was created successfully')
            ];
        }

        $trasanction->rollBack();

        return [
            'error' => 'true',
            'msg' => array_key_exists('message', $result) ? $result['message'] : Yii::t('app', 'Your notify payment can`t be created')
        ];
    }

    /**
     * Crea una extensión de pago (gratuita o paga) y fuerza la conexion
     */
    private function createPaymentExtensionAndForce($contract_id)
    {
        $contract = Contract::find()->andWhere(['contract_id' => $contract_id])->one();

        if (empty($contract)) {
            return [
                'status' => false,
                'message' => Yii::t('app', 'Contract not found'),
            ];
        }

        $connection = $contract->connection;

        if (empty($connection)) {
            return [
                'status' => false,
                'message' => Yii::t('app', 'Connection not found'),
            ];
        }

        if($connection->canForce()) {
            $payment_extension_product = Config::getValue('extend_payment_product_id');
            $payment_extension_duration_days_for_free = Config::getValue('payment_extension_duration_days_free');

            $due_timestamp = strtotime(date('Y-m-d')) + 86400 * (int)$payment_extension_duration_days_for_free;
            $due_date = date('d-m-Y', $due_timestamp);

            if($connection->force($due_date, $payment_extension_product, null, false)){
                //Activo los items del contrato
                $cti = new ContractToInvoice();
                $cti->updateContract($contract);
                return [
                    'status' => true,
                ];
            } else {
                return [
                    'status' => false,
                    'message' => Yii::t('app', 'An error occurred. Your connection can`t be restored.')
                ];
            }
        } else {
            return [
                'status' => false,
                'message' => Yii::t('app', 'Your connection can`t be restored.')
            ];
        }
            //Si no es gratuito, se está solicitando una extension de pago
    }
}
