<?php

namespace app\modules\sale\modules\contract\controllers;

use app\components\web\Controller;
use app\modules\automaticdebit\models\AutomaticDebit;
use app\modules\config\models\Config;
use app\modules\sale\models\Address;
use app\modules\sale\models\Customer;
use app\modules\sale\models\CustomerLog;
use app\modules\sale\models\Product;
use app\modules\sale\models\ProductToInvoice;
use app\modules\sale\models\search\FundingPlanSearch;
use app\modules\sale\modules\contract\components\ContractLowService;
use app\modules\sale\modules\contract\components\ContractToInvoice;
use app\modules\sale\modules\contract\models\Contract;
use app\modules\sale\modules\contract\models\ContractDetail;
use app\modules\sale\modules\contract\models\search\ContractDetailSearch;
use app\modules\sale\modules\contract\models\search\ContractSearch;
use app\modules\ticket\models\Ticket;
use app\modules\westnet\models\Connection;
use app\modules\westnet\models\EmptyAds;
use app\modules\westnet\models\Node;
use app\modules\westnet\models\search\NodeSearch;
use app\modules\westnet\models\Vendor;
use DateTime;
use webvimark\modules\UserManagement\models\User;
use Yii;
use yii\data\ActiveDataProvider;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;
use yii\web\ForbiddenHttpException;
use yii\web\HttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use yii\widgets\ActiveForm;

/**
 * ContractController implements the CRUD actions for Contract model.
 */
class ContractController extends Controller {

	public function behaviors()
    {
        return array_merge(parent::behaviors(), [
            'verbFilter' => [
                'class' => VerbFilter::class,
                'actions' => [
                    'search' => ['POST']
                ],
            ],
        ]); // TODO: Change the autogenerated stub
    }


    /**
     * Activa contrato
     *
     * @param $id
     * @return string|Response
     * @throws NotFoundHttpException
     */
    /* public function actionActiveContract($id) {
        $model = $this->findModel($id);
        $connection = Connection::findOne(['contract_id' => $model->contract_id]);
        
        if (!$connection) {
            $connection = new Connection();
        }

        $nodesQuery = Node::find();
        $nodesQuery->select(['node.node_id', 'concat(node.name, \' - \', s.name) as name'])
            ->leftJoin('server s', 'node.server_id = s.server_id')
            ->orderBy('node.name');
            

        $nodes = ArrayHelper::map($nodesQuery->all(), 'node_id', 'name');
        
        if (!empty($_POST['Contract']) && $_POST['Contract']['customerCodeADS'] !== '') {
            $code = $_POST['Contract']['customerCodeADS'];
            $customer = Customer::findOne(['customer_id' => $model->customer_id]);
            // Busco el ADS vacio
            $emptyAds = EmptyAds::findOne(['code' => $code , 'used' => false]);
            // Si tiene ADS vacio, tengo que forzar la actualizacion del company en el cliente.
            if(!empty($emptyAds)) {
                $customer->code = $code;
                $customer->payment_code = $emptyAds->payment_code;
                $customer->company_id = $emptyAds->company_id;
                $customer->status = Customer::STATUS_ENABLED;
                $emptyAds->used = true;
                $customer->save(false);
                $emptyAds->updateAttributes(['used']);
            }else{
                Yii::$app->session->setFlash('error', Yii::t('app', 'This ADS has been used before or not exist'));
                return $this->render('active-contract', [
                    'model' => $model,
                    'connection' => $connection,
                    'action' => 'active',
                    'nodes' => $nodes
                ]);
            }
        }

        $model->from_date = Yii::$app->formatter->asDate(new DateTime());
        $model->setScenario('invoice');
        if ($model->load(Yii::$app->request->post()) && $connection->load(Yii::$app->request->post()) && $model->validate()) {
            $connection->contract_id = $model->contract_id;
            $connection->due_date = null;

            // Si viene desde un vendedor, no va a tener empresa, por lo que hay que sacarla de del nodo.
            //Si la coneccion se guarda
            if ($connection->save() && $model->save()) {
                $cti = new ContractToInvoice();
                if ($cti->createContract($model, $connection)) {
                    $model->customer->sendMobileAppLinkSMSMessage();
                    Ticket::createGestionADSTicket($model->customer_id);
                    $model->customer->updateAttributes(['status' => Customer::STATUS_ENABLED]);
                    return $this->redirect(['/sale/contract/contract/view', 'id' => $model->contract_id]);
                }
            }
        }

        return $this->render('active-contract', [
                    'model' => $model,
                    'connection' => $connection,
                    'action' => 'active',
                    'nodes' => $nodes
        ]);
    } */

    public function actionCreateContract(){
        //$post = Yii::$app->request->post();
        return [
    		'msg' => 'prueba',
    	];
        
    }
}
