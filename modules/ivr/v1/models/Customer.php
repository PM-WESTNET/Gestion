<?php
/**
 * Created by PhpStorm.
 * User: juan
 * Date: 16/07/19
 * Time: 13:24
 */

namespace app\modules\ivr\v1\models;



use app\modules\config\models\Config;
use app\modules\sale\models\Product;

class Customer extends \app\modules\sale\models\Customer
{

    public function fields()
    {
        return [
            'customer_id',
            'fullName',
            'documentType',
            'document_number',
            'code'
        ]; // TODO: Change the autogenerated stub
    }

    public function accountInfo() {
        $data = [];

        $current_balance = $this->current_account_balance;

        $lastPayment = Payment::find()->andWhere(['customer_id' => $this->customer_id])->orderBy(['timestamp' => SORT_DESC])->one();

        $data['balance'] = ($current_balance !== null ? $current_balance : 0);

        if($lastPayment) {
            $data['last_payment'] = $lastPayment;
        }

        return $data;
    }

    public function extendConnetionInfo()
    {
        $payment_extension_product = Product::findOne(Config::getValue('extend_payment_product_id'));
        $payment_extension_duration_days = Config::getValue('payment_extension_duration_days');
        $payment_extension_duration_days_for_free = Config::getValue('payment_extension_duration_days_free');

        $contracts = [];
        $payment_extension_requested = $this->getPaymentExtensionQtyRequest();
        $duration_days = $payment_extension_requested < 1 ? $payment_extension_duration_days_for_free : $payment_extension_duration_days;

        foreach ($this->contracts as $contract) {
            $contracts[] = [
                'contract_id' => $contract->contract_id,
                'service_address' => $contract->address ? $contract->address->fullAddress : $this->address,
            ];
        }


        if (empty($payment_extension_product)) {
            $price = 0;
        }else {
            $price = round($payment_extension_product->finalPrice, 2);
        }

        $payment_extension_info = [
            'code' => $this->code,
            'contracts' => $contracts,
            'price' => $payment_extension_requested < 1 ? 0 : $price,
            'from_date' => (new \DateTime('now'))->format('d-m-Y'),
            'to_date' => (new \DateTime('now'))->modify("+$duration_days days")->format('d-m-Y'),
        ];

        return $payment_extension_info;
    }

}