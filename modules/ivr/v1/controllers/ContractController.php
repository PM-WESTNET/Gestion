<?php

namespace app\modules\ivr\v1\controllers;

use app\modules\ivr\v1\components\Controller;
use Yii;
use yii\base\Exception;
use yii\filters\VerbFilter;
use yii\web\BadRequestHttpException;
use app\modules\sale\models\Customer;
use app\modules\sale\modules\contract\models\Contract;
use app\modules\sale\modules\contract\components\ContractToInvoice;
use app\modules\westnet\models\Connection;
use app\modules\westnet\models\EmptyAds;
use app\modules\westnet\models\Node;
use app\modules\ticket\models\Ticket;
use DateTime;

/**
 * ContractController implements the CRUD actions for Contract model.
 */
class ContractController extends Controller
{

    public function behaviors()
    {
        return array_merge(parent::behaviors(), [
            'verbFilter' => [
                'class' => VerbFilter::class,
                'actions' => [
                    'search' => ['POST']
                ],
            ],
        ]); // TODO: Change the autogenerated stub
    }

    //copia de modules/sale/modules/contract/views/contract/active-contract.php
    /* public function actionActiveContract($id) {
        $model = $this->findModel($id);
        $connection = Connection::findOne(['contract_id' => $model->contract_id]);
        
        if (!$connection) {
            $connection = new Connection();
        }

        $nodesQuery = Node::find();
        $nodesQuery->select(['node.node_id', 'concat(node.name, \' - \', s.name) as name'])
            ->leftJoin('server s', 'node.server_id = s.server_id')
            ->orderBy('node.name');
            

        $nodes = ArrayHelper::map($nodesQuery->all(), 'node_id', 'name');
        
        if (!empty($_POST['Contract']) && $_POST['Contract']['customerCodeADS'] !== '') {
            $code = $_POST['Contract']['customerCodeADS'];
            $customer = Customer::findOne(['customer_id' => $model->customer_id]);
            // Busco el ADS vacio
            $emptyAds = EmptyAds::findOne(['code' => $code , 'used' => false]);
            // Si tiene ADS vacio, tengo que forzar la actualizacion del company en el cliente.
            if(!empty($emptyAds)) {
                $customer->code = $code;
                $customer->payment_code = $emptyAds->payment_code;
                $customer->company_id = $emptyAds->company_id;
                $customer->status = Customer::STATUS_ENABLED;
                $emptyAds->used = true;
                $customer->save(false);
                $emptyAds->updateAttributes(['used']);
            }else{
                Yii::$app->session->setFlash('error', Yii::t('app', 'This ADS has been used before or not exist'));
                return $this->render('active-contract', [
                    'model' => $model,
                    'connection' => $connection,
                    'action' => 'active',
                    'nodes' => $nodes
                ]);
            }
        }

        $model->from_date = Yii::$app->formatter->asDate(new DateTime());
        $model->setScenario('invoice');
        if ($model->load(Yii::$app->request->post()) && $connection->load(Yii::$app->request->post()) && $model->validate()) {
            $connection->contract_id = $model->contract_id;
            $connection->due_date = null;

            // Si viene desde un vendedor, no va a tener empresa, por lo que hay que sacarla de del nodo.
            //Si la coneccion se guarda
            if ($connection->save() && $model->save()) {
                $cti = new ContractToInvoice();
                if ($cti->createContract($model, $connection)) {
                    $model->customer->sendMobileAppLinkSMSMessage();
                    Ticket::createGestionADSTicket($model->customer_id);
                    $model->customer->updateAttributes(['status' => Customer::STATUS_ENABLED]);
                    return $this->redirect(['/sale/contract/contract/view', 'id' => $model->contract_id]);
                }
            }
        }

        return $this->render('active-contract', [
                    'model' => $model,
                    'connection' => $connection,
                    'action' => 'active',
                    'nodes' => $nodes
        ]);
    } */

    /**
     * Activa contrato a traves de API (necesita auth token)
     *
     * @return json
     */
    public function actionCreateContract()
    {
        $data = Yii::$app->request->post();

        if (!isset($data['node_id']) || !isset($data['customer_id'])  || !isset($data['ads_code'])) 
            return [
                'error' => true,
                'message' => 'the fields node_id, customer_id, ads_code are required'
            ];
        

        if (empty($data['node_id']) || empty($data['customer_id'])  || empty($data['ads_code'])) 
            return [
                'error' => true,
                'message' => 'the fields node_id, customer_id, ads_code are empty'
            ];
        

        $customer = Customer::findOne(['customer_id' => $data['customer_id']]);

        $contract = Contract::find()->where(['customer_id' => $data['customer_id']])->andWhere(['!=','status','inactive'])->orderBy(['contract_id' => SORT_DESC])->one();
        
        $connection = Connection::findOne(['contract_id' => $contract->contract_id]);

        if (!$connection){ // creates a new connection based on the existing contract when no connection exists already
            $connection = new Connection();
        }

        if(empty($contract))
            return [
                'error' => true,
                'message' => 'The customers contract is empty'
            ];
        elseif ($contract->status == 'active' && $connection->status == 'disabled'){
            $this->updateConnectionStatus($connection);
            return [
                'error' => true,
                'message' => 'The last contract of customer is active. Updated connection status to active',
                'code' => 206
            ];
        }
        elseif ($contract->status == 'active') 
            return [
                'error' => true,
                'message' => 'The last contract of customer is active',
                'code' => 206
            ];
        
        
        
        $ads_code = $data['ads_code'];

        // Busco el ADS vacio
        $emptyAds = EmptyAds::findOne(['code' => $ads_code , 'used' => false]);

        // Si tiene ADS vacio, tengo que forzar la actualizacion del company en el cliente.
        if(!empty($emptyAds)){
            $customer->code = $ads_code;
            $customer->payment_code = $emptyAds->payment_code;
            $customer->company_id = $emptyAds->company_id;
            $customer->status = Customer::STATUS_ENABLED;
            $emptyAds->used = true;
            $customer->save(false);
            $emptyAds->updateAttributes(['used']);
        }
        else{
            return [
                'error' => true,
                'message' => 'The ADS specified doesnt exist.'
            ];
        }
        // retornar error si el ADS no existe.

        
        $contract->from_date = Yii::$app->formatter->asDate(new DateTime());
        $contract->setScenario('invoice');
        if ($contract->validate()) {
            $node = Node::findOne(['node_id' => $data['node_id']]);
            
            if(empty($node))
                return [
                    'error' => true,
                    'message' => 'The node_id doesnt exists'
                ];
            

            $connection->node_id = $data['node_id'];
            $connection->server_id = $node->server_id;
            $connection->access_point_id = '';
            $connection->mac_address = '';
            $connection->ip4_public = '0';
            $connection->contract_id = $contract->contract_id;
            $connection->due_date = null;
            $connection->status = 'enabled';
            $connection->ip4_2 = '0';


            // Si viene desde un vendedor, no va a tener empresa, por lo que hay que sacarla de del nodo.
            //Si la coneccion se guarda
            if ($connection->save() && $contract->save()) {
                
                $cti = new ContractToInvoice();
                if ($cti->createContract($contract, $connection)) {
                    $contract->customer->sendMobileAppLinkSMSMessage();
                    Ticket::createGestionADSTicket($contract->customer_id);
                    $contract->customer->updateAttributes(['status' => Customer::STATUS_ENABLED]);
                    
                    // try to up the existing connection based on ID. 
                    $this->updateConnectionStatus($connection);
                    //$result = ($connection->status_account == Connection::STATUS_ACCOUNT_ENABLED);

                    return [
                        'error' => false,
                        'message' => 'the contract and connection were activated successfully'
                    ];
                }
            }else{
                return [
                    'error' => false,
                    'message' => 'Couldnt save new contract or connection instances to BD'
                ];
            }

        }else{
            return [
                'error' => true,
                'message' => 'This contract is invalid'
            ];
        }

    }
    private function updateConnectionStatus($connection){
        $connection->status_account = Connection::STATUS_ACCOUNT_ENABLED;
        $connection->update(false);
    }
}
