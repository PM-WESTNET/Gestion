<?php

namespace app\modules\mobileapp\v1\models;

use app\modules\config\models\Config;
use Yii;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "auth_token".
 *
 * @property integer $auth_token_id
 * @property string $token
 * @property string $expire_timestamp
 * @property integer $user_app_id
 *
 * @property UserApp $userApp
 */
class AuthToken extends ActiveRecord
{


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'auth_token';
    }
    
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_app_id'], 'required'],
            [['user_app_id'], 'integer'],
            [['token'], 'string', 'max' => 255],
            [['expire_timestamp'], 'integer']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'auth_token_id' => 'Auth Token ID',
            'token' => 'Token',
            'expire_timestamp' => 'Expire Timestamp',
            'user_app_id' => 'User App ID',
        ];
    }    


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserApp()
    {
        return $this->hasOne(UserApp::className(), ['user_app_id' => 'user_app_id']);
    }
         
    /**
     * @inheritdoc
     * Strong relations: None.
     */
    public function getDeletable()
    {
        return true;
    }
    
    /**
     * @brief Deletes weak relations for this model on delete
     * Weak relations: UserApp.
     */
    protected function unlinkWeakRelations(){
    }
    
    /**
     * @inheritdoc
     */
    public function beforeDelete()
    {
        if (parent::beforeDelete()) {
            if($this->getDeletable()){
                $this->unlinkWeakRelations();
                return true;
            }
        } else {
            return false;
        }
    }

    public static function validateToken($token){
        return AuthToken::find()->andWhere(['token' => $token])->andWhere(['>=', 'expire_timestamp' , time()])->exists();
    }

    public function beforeSave($insert)
    {
        if ($insert){
            $this->token = uniqid('', true);
            $this->expire_timestamp= time() + (Config::getValue('auth_token_duration') * 86400);
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

}
